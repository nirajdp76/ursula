---
- name: install cinder-data required packages
  package: name={{ item }}
  with_items: "{{ cinder.data_pkgs[os] }}"
  register: result
  until: result|succeeded
  retries: 5

- name: iscsi target framework conf dir
  file: dest=/etc/tgt/conf.d state=directory

- name: tgt config files
  template: src={{ item.value.src }} dest={{ item.value.dest }} mode=0644
  with_dict:
    targets:
      src: etc/tgt/targets.conf
      dest: /etc/tgt/targets.conf
    cinder_tgt:
      src: etc/tgt/conf.d/cinder_tgt.conf
      dest: /etc/tgt/conf.d/cinder_tgt.conf
  notify: restart tgt service

- name: ensure tgt service is running
  service: name="{{ cinder.tgt_service[os] }}" state=started

- include: volume_group.yml
  when: cinder.create_vg|bool and ( cinder.fixed_key is not defined or (cinder.fixed_key is defined and "compute" not in group_names) )

- name: iscsi start
  service: name="{{ cinder.iscsi_service[os] }}" state=started

- name: enable cinder encryption
  template: src=etc/cinder/cinder.encryption.conf dest=/etc/cinder/cinder.encryption.conf mode=0640
            owner=root group=cinder
  notify: restart cinder services
  when: cinder.fixed_key is defined

- name: disable cinder encryption
  file: dest=/etc/cinder/cinder.encryption.conf state=absent
  notify: restart cinder services
  when: cinder.fixed_key is not defined

#When OS is Ubuntu
- block:
  - name: install cinder-volume service (ubuntu)
    upstart_service:
      name: "{{ cinder.service_names[os].cinder_volume }}"
      user: cinder
      cmd: /usr/local/bin/cinder-volume
      config_dirs: /etc/cinder

  - name: install cinder backup service (ubuntu)
    upstart_service:
      name: "{{ cinder.service_names[os].cinder_backup }}"
      user: cinder
      cmd: /usr/local/bin/cinder-backup
      config_dirs: /etc/cinder
    when: swift.enabled|default("false")|bool
  when: os == 'ubuntu'


#When OS is Rhel
- block:
  - name: install cinder-volume service (rhel)
    systemd_service:
      name: "{{ cinder.service_names[os].cinder_volume }}"
      description: OpenStack Cinder Volume Service
      type: simple
      user: cinder
      config_files: /etc/cinder/cinder.conf
      cmd: "{{ (ansible_distribution == 'RedHat') | ternary('/usr/bin/', '/usr/local/bin/') }}cinder-volume"
      config_dirs: /etc/cinder
      restart: on-failure
      kill_mode: process
      wanted_by: multi-user.target

  - name: install cinder backup service (rhel)
    systemd_service:
      name: "{{ cinder.service_names[os].cinder_backup }}"
      description: OpenStack Cinder Backup Service
      type: simple
      user: cinder
      config_files: /etc/cinder/cinder.conf
      cmd: "{{ (ansible_distribution == 'RedHat') | ternary('/usr/bin/', '/usr/local/bin/') }}cinder-backup"
      config_dirs: /etc/cinder
      restart: on-failure
      wanted_by: multi-user.target
    when: swift.enabled|default("false")|bool
  when: os == 'rhel'

- name: trigger restart on upgrades
  debug:
    msg: "Triggering service restart for upgrade"
  changed_when: True
  notify:
    - restart cinder services
    - restart cinder backup service
  when: (code_has_changed | default('False') | bool and upgrade | default('False') | bool) or
        (ceph.enabled|default('False')|bool and upgrade_ceph|bool)

- meta: flush_handlers

- name: start cinder-volume
  service:
    name: "{{ cinder.service_names[os].cinder_volume }}"
    state: started
    enabled: True
  delegate_to: "{{ item }}"
  run_once: True
  with_items: "{{ play_hosts }}"

- name: start cinder backup
  service:
    name: "{{ cinder.service_names[os].cinder_backup }}"
    state: started
    enabled: True
  delegate_to: "{{ item }}"
  run_once: True
  when: swift.enabled|default("false")|bool
  with_items: "{{ play_hosts }}"

- include: monitoring.yml
  when: monitoring.enabled|default('True')|bool
  tags:
    - monitoring
    - common
